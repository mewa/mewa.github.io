<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Marcin Chmiel</title>
    <link>https://marcinchmiel.com/posts/</link>
    <description>Recent content in Posts on Marcin Chmiel</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 31 Jan 2020 01:43:55 +0100</lastBuildDate>
    
	<atom:link href="https://marcinchmiel.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Things to consider when choosing nodes for your Kubernetes cluster</title>
      <link>https://marcinchmiel.com/articles/2020-01/things-to-consider-when-choosing-nodes-for-your-kubernetes-cluster/</link>
      <pubDate>Fri, 31 Jan 2020 01:43:55 +0100</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2020-01/things-to-consider-when-choosing-nodes-for-your-kubernetes-cluster/</guid>
      <description>&lt;p&gt;Regardless of whether you&amp;rsquo;re architecting new services
or preparing to migrate your workloads &amp;ndash; choosing the
proper underlying nodes size can make or break your experience with
this amazing tool. Here are some key points you should pay attention to.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducting authmagic.io - a passwordless authentication service</title>
      <link>https://marcinchmiel.com/articles/2019-01/introducting-authmagic.io-a-passwordless-authentication-service/</link>
      <pubDate>Sat, 12 Jan 2019 11:19:09 +0100</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2019-01/introducting-authmagic.io-a-passwordless-authentication-service/</guid>
      <description>Lately I have decided to take some time to work on my side-projects and make them useful for the broader public.
Inevitably, I bumped into a problem. Actually, not really a problem, but I had to implement a simple authentication scheme that at the same time wouldn&amp;rsquo;t be an overkill.
I decided to use passwordless login and registration links because it seemed to fit my app just right and I wanted to have as little overhead as possible.</description>
    </item>
    
    <item>
      <title>Abandon relations all ye who enter here: a treatise on silver bullets</title>
      <link>https://marcinchmiel.com/articles/2018-12/abandon-relations-all-ye-who-enter-here-a-treatise-on-silver-bullets/</link>
      <pubDate>Thu, 20 Dec 2018 16:00:00 +0000</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2018-12/abandon-relations-all-ye-who-enter-here-a-treatise-on-silver-bullets/</guid>
      <description>&lt;p&gt;Recently I read an article about &lt;a href=&#34;https://www.theguardian.com/info/2018/nov/30/bye-bye-mongo-hello-postgres&#34;&gt;&lt;em&gt;The Guardian&lt;/em&gt; migrating from Mongo to Postgres&lt;/a&gt;. What struck me far more than the article itself, was the heated discussion going on under the reddit post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Launch a CI service in 100 lines of Clojure</title>
      <link>https://marcinchmiel.com/articles/2018-05/launch-a-ci-service-in-100-lines-of-clojure/</link>
      <pubDate>Wed, 02 May 2018 02:18:29 +0200</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2018-05/launch-a-ci-service-in-100-lines-of-clojure/</guid>
      <description>&lt;p&gt;There are many factors that contribute to the quality of the code we produce. Undoubtfully, adopting Continuous Integration
is one of the biggest leaps one can make when closing the gap between &lt;em&gt;The Holy Grail Of Software Engineering&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Over time there have emerged quite a few CI services that make it easy to integrate changes to our code.
Unless you&amp;rsquo;ve been living in vacuum for the past few years, you must&amp;rsquo;ve heard names like Jenkins, TravisCI or CircleCI.&lt;/p&gt;
&lt;p&gt;But what if I told you, you could roll your own YetAnotherCI in just around 100 lines of Clojure? If this sounds interesting, make
sure to follow along and ship YACI with us.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using git notes to improve CD workflow</title>
      <link>https://marcinchmiel.com/articles/2018-04/using-git-notes-to-improve-cd-workflow/</link>
      <pubDate>Thu, 12 Apr 2018 17:34:29 +0200</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2018-04/using-git-notes-to-improve-cd-workflow/</guid>
      <description>&lt;p&gt;Git is certainly one of the most widely used tools in software development industry &amp;ndash; it&amp;rsquo;s essential.
However, many people forget about the many options it provides apart from serving simply as a VCS.
I think &lt;code&gt;git notes&lt;/code&gt; is one of such commands, which can immensely improve your workflow &amp;ndash; let&amp;rsquo;s see for ourselves why you&amp;rsquo;d like to start using it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redirecting output to other terminal</title>
      <link>https://marcinchmiel.com/articles/2017-12/redirecting-output-to-other-terminal/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2017-12/redirecting-output-to-other-terminal/</guid>
      <description>&lt;p&gt;There are many reasons one might want to see output from shell commands in another terminal emulator but it definitely has its uses. The other day it just so happended that I needed such a functionality. Without going into details I&amp;rsquo;m going to show you how to achieve such behaviour &amp;ndash; and more &amp;ndash; easily, by leveraging the fact that under the hood std(in|out|err) are just *nix file descriptors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell-style lambdas in Lisp</title>
      <link>https://marcinchmiel.com/articles/2017-10/haskell-style-lambdas-in-lisp/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2017-10/haskell-style-lambdas-in-lisp/</guid>
      <description>&lt;p&gt;Recently I was toying around with Lisp a bit and thought I&amp;rsquo;d share some insights.&lt;/p&gt;
&lt;p&gt;As you may or may not know programming in Lisps is somewhat different from the average programming languages you&amp;rsquo;re used to. In what way, you might ask &amp;ndash; and no, I &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; mean being swarmed up with parenthesis (besides syntax should be the least concern when picking &lt;em&gt;The Right Tool&lt;/em&gt;). Here&amp;rsquo;s why.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Launching terminal emulator in current working directory in XMonad</title>
      <link>https://marcinchmiel.com/articles/2017-09/launching-terminal-emulator-in-current-working-directory-in-xmonad/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2017-09/launching-terminal-emulator-in-current-working-directory-in-xmonad/</guid>
      <description>&lt;p&gt;Recently I got a bit fed up with my &lt;a href=&#34;http://xmonad.org&#34;&gt;XMonad&lt;/a&gt; configuration and decided to add some of the missing bits. After all I made the switch with &lt;em&gt;productivity&lt;/em&gt; in mind so it would be silly to endure even the slightest tradeoffs. If you don&amp;rsquo;t know what XMonad is &amp;ndash; it&amp;rsquo;s an &lt;em&gt;extremely&lt;/em&gt; customizable tiling window manager &amp;ndash; the default configuration is, however, pretty crude, so it doesn&amp;rsquo;t really make sense to switch if you&amp;rsquo;re not going to tweak it, even if just slightly.&lt;/p&gt;
&lt;p&gt;To the point &amp;ndash; one of the things I was missing was the ability to open a new terminal emulator window in the same working directory as the one I had focused. I felt that existing solutions such as the &lt;a href=&#34;https://hackage.haskell.org/package/xmonad-contrib-0.13/docs/XMonad-Layout-WorkspaceDir.html&#34;&gt;WorkspaceDir&lt;/a&gt; extension were lacking and not exactly what I was looking for. And so I had to write one myself. Since I figured I couldn&amp;rsquo;t be the only one in need I decided I&amp;rsquo;d share my snippet.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Polyglot assembly 101</title>
      <link>https://marcinchmiel.com/articles/2017-07/polyglot-assembly-101/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2017-07/polyglot-assembly-101/</guid>
      <description>&lt;p&gt;As promised in my &lt;a href=&#34;https://marcinchmiel.com/articles/2017-05/the-somewhat-lengthy-hello-world-post/&#34;&gt;somewhat lengthy &amp;ldquo;Hello World&amp;rdquo; post&lt;/a&gt;, although much later than intended, I finally got down to writing a follow-up post.&lt;/p&gt;
&lt;p&gt;I remember one of the very first lectures during my uni course &amp;ndash; when &lt;code&gt;assembly&lt;/code&gt; language was being introduced. Nothing too deep, really. However, I recall a statement being made, that probably still lives in the minds of the many that heard it (and perhaps even more that didn&amp;rsquo;t). Namely &amp;ndash; that &lt;code&gt;assembly&lt;/code&gt; code is not &lt;em&gt;portable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this post we&amp;rsquo;re going to take a look at how misleading that statement is and explore writing &lt;strong&gt;polyglot assembly code&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin with dagger-android basic setup</title>
      <link>https://marcinchmiel.com/articles/2017-05/kotlin-with-dagger-android-basic-setup/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2017-05/kotlin-with-dagger-android-basic-setup/</guid>
      <description>&lt;p&gt;Since &lt;code&gt;dagger-android&lt;/code&gt; is fairly new, every article on the Internet shows the &amp;ldquo;old&amp;rdquo; way of incorporating Dagger 2 into your Kotlin app, which involves writing some amounts of boilerplate code (well, so does any app using &lt;code&gt;dagger&lt;/code&gt;, but at least with the addition of &lt;code&gt;dagger-android&lt;/code&gt; you can try to cut it down a bit).&lt;/p&gt;
&lt;p&gt;While for seasoned veterans it may be simple, I thought that, especially for less experienced developers, a fully working example could be useful.
This is an example of the most basic setup using &lt;code&gt;dagger-android&lt;/code&gt; in Kotlin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update (2018-02-24)&lt;/strong&gt;: When this guide was first written it was using &lt;code&gt;2.11-rc2&lt;/code&gt; version of &lt;code&gt;dagger&lt;/code&gt;. Dagger extensions for Android have evolved since and now it&amp;rsquo;s even easier to set things up. Below you can find the updated guide using version &lt;code&gt;2.12&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The somewhat lengthy &#34;Hello world&#34; post</title>
      <link>https://marcinchmiel.com/articles/2017-05/the-somewhat-lengthy-hello-world-post/</link>
      <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://marcinchmiel.com/articles/2017-05/the-somewhat-lengthy-hello-world-post/</guid>
      <description>&lt;p&gt;It is a long honored tradition for IT texts to start with these famous words. Over the years, the languages have evolved, so did the paradigms by which we write our code &amp;ndash; yet almost every book or tutorial, on any language, still begins with this simple piece of &lt;em&gt;software&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since I don&amp;rsquo;t want to stir things up and be some kind of a rebel this blog shall not be different &amp;ndash; in this particular case.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>